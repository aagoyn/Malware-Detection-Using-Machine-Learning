from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
import numpy as np
import pandas as pd
import re
# from nltk.corpus import stopwords
# from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

url = 'https://github.com/aagoyn/Malware-Detection-Using-Machine-Learning/blob/49c2537ddb37a6d8bf41a10133bd0aae59b0382e/MalwareData.csv.gz?raw=true'
maldata = pd.read_csv(url,  compression='gzip', sep="|")
# maldata = pd.read_csv(r"C:\Users\Asus\Downloads\MalwareData.csv", sep="|")
legit = maldata[0:41323].drop(["legitimate"], axis=1)
mal = maldata[41323::].drop(["legitimate"], axis=1)

print("The shape of the legit dataset is: %s sample, %s feature" %
      (legit.shape[0], legit.shape[1]))
print("The shape of the mal dataset is: %s sample, %s feature" %
      (mal.shape[0], mal.shape[1]))
print("---------------------------------------------------------------------------")
print(maldata.columns)
print("---------------------------------------------------------------------------")
print(maldata.head(5))
print("---------------------------------------------------------------------------")
pd.set_option("display.max_columns", None)
print(maldata.head(5))
print("---------------------------------------------------------------------------")
print(legit.take([1]))
print("---------------------------------------------------------------------------")
print(mal.take([1]))
print("---------------------------------------------------------------------------")

# from sklearn import cross_validation
data_in = maldata.drop(['Name', 'md5', 'legitimate'], axis=1).values
labels = maldata['legitimate'].values
extratrees = ExtraTreesClassifier().fit(data_in, labels)
select = SelectFromModel(extratrees, prefit=True)
data_in_new = select.transform(data_in)
print(data_in.shape, data_in_new.shape)
print("---------------------------------------------------------------------------")


features = data_in_new.shape[1]
importances = extratrees.feature_importances_
indices = np.argsort(importances)[::-1]

for f in range(features):
    print("%d" % (f+1), maldata.columns[2+indices[f]], importances[indices[f]])
